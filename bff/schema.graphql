"""
Autogenerated input type of AddHashtags
"""
input AddHashtagsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  recipeId: ID!
  value: String!
}

"""
Autogenerated return type of AddHashtags
"""
type AddHashtagsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  hashtags: [Hashtag!]
}

type Hashtag {
  id: ID!
  name: String!
}

type Ingredient {
  id: ID!
  name: String!
  quantity: String
}

type Mutation {
  addHashtags(
    """
    Parameters for AddHashtags
    """
    input: AddHashtagsInput!
  ): AddHashtagsPayload

  """
  An example field added by the generator
  """
  testField: String!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Query {
  recipe(id: String!, imageSize: String): Recipe!
  recipes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    imageSize: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RecipeConnection!

  """
  An example field added by the generator
  """
  testField: String!
}

type Recipe {
  description: String!
  hashtags(hashtagLimitPerRecipe: Int): [Hashtag!]!
  id: ID!
  imageUrl: String
  ingredients: [Ingredient!]!
  steps: [Step!]!
  title: String!
  user: User!
}

"""
The connection type for Recipe.
"""
type RecipeConnection {
  """
  A list of edges.
  """
  edges: [RecipeEdge]

  """
  A list of nodes.
  """
  nodes: [Recipe]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type RecipeEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Recipe
}

type Step {
  id: ID!
  imageUrl: String
  memo: String!
}

type User {
  id: ID!
  imageUrl: String
  name: String!
}
